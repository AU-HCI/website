metavar term_var, x, y, z, f, u, v, s, p, w,n,m,r,b ::=

grammar

term, t :: 'term_' ::= 
  | x              ::   :: Variables
  | \ x . t        ::   :: Lam (+ bind x in t +)
    {{ tex \lambda [[x]] . [[t]] }}
  | t1 t2          ::   :: App
  | [ t / x ] t'   :: M :: Substitution
  | ( t )          :: S :: Parens
  | h( t )         :: M :: HParens
  {{tex [[t]] }}
  | fst :: :: Fst
  {{tex \mathsf{fst} }}
  | snd :: :: Snd
  {{tex \mathsf{snd} }}
  | sumPar :: :: SumPair
  {{tex \mathsf{sumPair} }}
  | True  :: :: True
  {{tex \mathsf{True} }}
  | False :: :: False
  {{tex \mathsf{False} }}
  | if :: :: If
  {{tex \mathsf{if} }}
  | not :: :: Not
  {{tex \mathsf{not} }}
  | and :: :: Conj
  {{tex \mathsf{and} }}
  | or :: :: Or
  {{tex \mathsf{or} }}
  | mult :: :: Mult
  {{tex [[mult]] }}
  | exp :: :: exp
  {{tex [[exp]] }}
  | plus :: :: Plus
  {{tex \mathsf{plus} }}
  | ul( t ) :: :: UL
  {{tex \underline{[[t]]} }}  

formula :: 'formula_' ::=
  | judgement              ::  :: judgement
  | judgement && judgement' :: :: Quad
  {{tex [[judgement]] \quad [[judgement']] }}
  | ( formula )            ::  :: parens
  | depth( t ) :: :: Depth
  {{tex \mathsf{depth}([[t]]) }}

defns
 Opsem :: '' ::=
 defn
 t ~> t' :: :: sstep :: ''
   {{tex [[t]] \rightsquigarrow [[t']] }}
 by

  t ~> t'
  ------------- :: Lam
  \x.t ~> \x.t'
  
  t1 ~> t'1
  --------------- :: App1
  t1 t2 ~> t'1 t2

  t2 ~> t'2
  --------------- :: App2
  t1 t2 ~> t1 t'2
  
  ----------------------- :: Beta
  (\x . t) t' ~> [t'/x]t  

 defn
 t ~*> t' :: :: mstep :: ''
   {{tex [[t]] \rightsquigarrow^* [[t']] }}
 by

 ------- :: Refl
 t ~*> t 

 t ~> t'
 ------- :: SStep
 t ~*> t'

 t1 ~*> t2 && t2 ~*> t3
 ----------------------- :: MStep
 t1 ~*> t3