metavar var, x, y, z, f, u, v ::=

metavar type_var, X, Y ::=
  
indexvar ivar, k, i, j ::= 

grammar

term, t, q, w :: 'term_' ::= 
  | x               ::   :: Variables
  | \ x : T . t     ::   :: Lam
  {{tex \lambda [[x]]:[[T]].[[t]] }}
  | rec t t1 t2 ::   :: Rec
  {{tex \mathsf{rec}\,[[t]]\,[[t1]]\,[[t2]] }}
  | t1 t2           ::   :: App
  {{tex [[t1]]\,[[t2]] }}
  | Suc t            ::   :: Suc
  {{tex \mathsf{suc}\,[[t]] }}
  | 0               ::   :: Zero
  | [ t / x ] t'    :: M :: Substitution
  | ( t )           :: M :: Parens
  | h( t )           :: M :: HParens
  {{tex [[t]] }}

assump, G {{tex \Gamma }} :: 'ctx_' ::=
  | .             ::   :: Empty
    {{ tex \cdot }}
  | x : T         ::   :: Vars
  | G1 , G2       ::   :: Extension
  | ( G )         :: S :: Parens
  
type, T, A, B,C :: 'type_' ::=
  | Nat :: :: Nat
  {{tex \mathsf{Nat} }}
  | A -> B      ::   :: Implication
    {{ tex [[A]] \to [[B]] }}
  | [ A / X ] B :: M :: Substitution
  {{tex \mathsf{replaceTyTy}\,[[X]]\,\mathsf{with}\,[[A]]\,\mathsf{in}\,[[B]] }}
  | ( T )       :: M :: Parens
  | h{ T }       :: M :: HParens
  {{tex [[T]] }}

 formula :: 'formula_' ::=
  | judgement               ::  :: judgement
  | formula1 ... formulak   ::  :: judgement_list
  | formula1 && formula2    ::  :: judgement_list2
  {{tex [[formula1]] \quad [[formula2]] }}
  | h( formula ) :: :: HParens
  {{tex [[formula]] }}
  | ( formula )             ::  :: parens
  | x : T in G              ::  :: ctx_lookup1
  {{tex [[x]]:[[T]] \in [[G]] }}

defns
  Jtyp :: '' ::=
 defn
 G |- t : T  :: :: typing :: 'T_' 
   {{tex [[G]] \vdash [[t]] : [[T]] }}
 by
  
  x : T in G 
  ----------- :: Var
  G |- x : T 

  ------------ :: Zero
  G |- 0 : Nat

  G |- t : Nat
  --------------------- :: Suc
  G |- Suc t : Nat

  G |- t : Nat 
  G |- t1 : T && G |- t2 : T -> h{Nat -> T}
  --------------------------------------------------------- :: Rec
  G |- rec t t1 t2 : T

  G , x : T1 |- t : T2
  -------------------------- :: Lam
  G |- \ x:T1 . t : T1 -> T2 

  G |- t1 : T1 -> T2 && G |- t2 : T1 
  ---------------------------------- :: App
  G |- t1 t2 : T2  

defns
  Eval :: '' ::=
  defn
  t1 ~> t2 :: :: eval :: 'E_'
  {{tex [[t1]] \redto [[t2]] }}
by

  ---------------------- :: Beta
  (\x:T.t) t' ~> [t'/x]t

  
  -------------------------- :: RecBase
  rec 0 t1 t2 ~> t1

  ------------------------------------------ :: RecStep
  rec (Suc t) t1 t2 ~> (t2 (rec t t1 t2)) t

  t ~> t'
  ----------------- :: Lam
  \x:T.t ~> \x:T.t'

  t1 ~> t'1 
  --------------- :: App1
  t1 t2 ~> t'1 t2

  t2 ~> t'2
  --------------- :: App2
  t1 t2 ~> t1 t'2

  t ~> t'
  --------------- :: Suc
  Suc t ~> Suc t'

  t ~> t'
  --------------------------- :: Rec1
  rec t t1 t2 ~> rec t' t1 t2

  t1 ~> t'1
  --------------------------- :: Rec2
  rec t t1 t2 ~> rec t t'1 t2

  t2 ~> t'2
  --------------------------- :: Rec3
  rec t t1 t2 ~> rec t t1 t'2