(set-logic QF_AUFNIRAFS)
(define-sort SMT_Elt () Int)
(define-sort SMT_Set () (Set SMT_Elt))
(define-fun smt_set_emp () SMT_Set (as emptyset (Set SMT_Elt)))
(define-fun smt_set_mem ((x SMT_Elt) (s SMT_Set)) Bool (member x s))
(define-fun smt_set_add ((s SMT_Set) (x SMT_Elt)) SMT_Set (insert x s))
(define-fun smt_set_cup ((s1 SMT_Set) (s2 SMT_Set)) SMT_Set (union s1 s2))
(define-fun smt_set_cap ((s1 SMT_Set) (s2 SMT_Set)) SMT_Set (intersection s1 s2))
(declare-fun smt_set_com (SMT_Set) SMT_Set)
(define-fun smt_set_dif ((s1 SMT_Set) (s2 SMT_Set)) SMT_Set (setminus s1 s2))
(define-fun smt_set_sub ((s1 SMT_Set) (s2 SMT_Set)) Bool (subset s1 s2))
(define-sort SMT_Map () (Array SMT_Elt SMT_Elt))
(define-fun smt_map_sel ((m SMT_Map) (k SMT_Elt)) SMT_Elt (select m k))
(define-fun smt_map_sto ((m SMT_Map) (k SMT_Elt) (v SMT_Elt)) SMT_Map (store m k v))
(declare-fun z3v69 () Int)
(declare-fun z3v70 () Int)
(assert (distinct z3v69 z3v70))
(declare-fun z3v71 () Int)
(declare-fun z3v72 () Int)
(assert (distinct z3v71 z3v72))
(declare-fun z3v73 () Int)
(declare-fun z3f74 (Int) Int)
(declare-fun z3f75 (Int) Bool)
(declare-fun z3v76 () Int)
(declare-fun z3v77 () Int)
(declare-fun z3v78 () Int)
(declare-fun z3v79 () Int)
(declare-fun z3f80 (Int) Int)
(declare-fun z3v81 () Int)
(declare-fun z3f82 (Int) Bool)
(declare-fun z3v83 () Int)
(push 1)
(assert (>= (z3f80 z3v83) 0))
(assert (z3f82 z3v83))
(assert (>= (z3f80 z3v78) 0))
(assert (>= (z3f80 z3v81) 0))
(assert (z3f82 z3v81))
(assert (>= (z3f80 z3v79) 0))
(assert (= z3v79 z3v78))
(assert (z3f75 z3v71))
(assert (= (z3f74 z3v77) z3v77))
(assert (= (z3f74 z3v76) z3v76))
(assert (not (z3f75 z3v72)))
(assert (= (z3f74 z3v73) z3v73))
(push 1)
(assert (not (>  (z3f80 z3v83) 0)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= (z3f80 z3v83) 0)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>= (z3f80 z3v83) (z3f80 z3v78))))
(check-sat)
(pop 1)
(push 1)
(assert (not (= (z3f80 z3v83) (z3f80 z3v78))))
(check-sat)
(pop 1)
(push 1)
(assert (not (<  (z3f80 z3v83) (z3f80 z3v78))))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= (z3f80 z3v83) (z3f80 z3v78))))
(check-sat)
(pop 1)
(push 1)
(assert (not (>  (z3f80 z3v83) (z3f80 z3v78))))
(check-sat)
(pop 1)
(pop 1)
(declare-fun z3v84 () Int)
(declare-fun z3v85 () Int)
(push 1)
(assert (>= (z3f80 z3v85) 0))
(assert (z3f82 z3v85))
(assert (z3f82 z3v85))
(assert (>= (z3f80 z3v85) 0))
(assert (>= (z3f80 z3v78) 0))
(assert (>= (z3f80 z3v84) 0))
(assert (z3f75 z3v71))
(assert (= (z3f74 z3v77) z3v77))
(assert (= (z3f74 z3v76) z3v76))
(assert (not (z3f75 z3v72)))
(assert (= (z3f74 z3v73) z3v73))
(assert (z3f82 z3v84))
(assert (z3f82 z3v84))
(assert (>= (z3f80 z3v84) 0))
(push 1)
(assert (not (z3f82 z3v85)))
(check-sat)
(pop 1)
(pop 1)
(declare-fun z3v86 () Int)
(push 1)
(assert (>= (z3f80 z3v86) 0))
(assert (z3f82 z3v86))
(assert (>= (z3f80 z3v78) 0))
(assert (>= (z3f80 z3v81) 0))
(assert (z3f82 z3v81))
(assert (>= (z3f80 z3v79) 0))
(assert (= z3v79 z3v78))
(assert (z3f75 z3v71))
(assert (= (z3f74 z3v77) z3v77))
(assert (= (z3f74 z3v76) z3v76))
(assert (not (z3f75 z3v72)))
(assert (= (z3f74 z3v73) z3v73))
(push 1)
(assert (not (and (>= (z3f80 z3v86) 0) (z3f82 z3v86) (z3f82 z3v86))))
(check-sat)
(pop 1)
(pop 1)
(declare-fun z3v87 () Int)
(declare-fun z3v88 () Int)
(declare-fun z3v89 () Int)
(declare-fun z3f90 (Int) Bool)
(declare-fun z3f91 () Int)
(declare-fun z3v92 () Int)
(push 1)
(assert (= z3v92 z3v72))
(assert (>= (z3f80 z3v89) 0))
(assert (= (z3f82 z3v89) false))
(assert (= (z3f90 z3v89) true))
(assert (= (z3f80 z3v89) 0))
(assert (= z3v89 z3f91))
(assert (= (z3f82 z3v89) false))
(assert (= (z3f90 z3v89) true))
(assert (= (z3f80 z3v89) 0))
(assert (>= (z3f80 z3v89) 0))
(assert (= z3v89 z3v88))
(assert (>= (z3f80 z3v88) 0))
(assert (= z3v87 z3v72))
(assert (z3f75 z3v71))
(assert (= (z3f74 z3v77) z3v77))
(assert (= (z3f74 z3v76) z3v76))
(assert (not (z3f75 z3v72)))
(assert (= (z3f74 z3v73) z3v73))
(push 1)
(assert (not (= (z3f75 z3v92) (z3f82 z3v88))))
(check-sat)
(pop 1)
(pop 1)
(declare-fun z3v93 () Int)
(declare-fun z3v94 () Int)
(declare-fun z3f95 (Int) Int)
(declare-fun z3v96 () Int)
(declare-fun z3f97 (Int) Int)
(declare-fun z3f98 (Int Int) Int)
(declare-fun z3v99 () Int)
(push 1)
(assert (= z3v99 z3v71))
(assert (>= (z3f80 z3v89) 0))
(assert (= (z3f82 z3v89) true))
(assert (= (z3f97 z3v89) z3v96))
(assert (= (z3f95 z3v89) z3v94))
(assert (= (z3f90 z3v89) false))
(assert (= (z3f80 z3v89) (+ 1 (z3f80 z3v94))))
(assert (= z3v89 (z3f98 z3v96 z3v94)))
(assert (= (z3f82 z3v89) true))
(assert (= (z3f97 z3v89) z3v96))
(assert (= (z3f95 z3v89) z3v94))
(assert (= (z3f90 z3v89) false))
(assert (= (z3f80 z3v89) (+ 1 (z3f80 z3v94))))
(assert (>= (z3f80 z3v89) 0))
(assert (= z3v89 z3v88))
(assert (>= (z3f80 z3v88) 0))
(assert (>= (z3f80 z3v94) 0))
(assert (= z3v93 z3v71))
(assert (z3f75 z3v71))
(assert (= (z3f74 z3v77) z3v77))
(assert (= (z3f74 z3v76) z3v76))
(assert (not (z3f75 z3v72)))
(assert (= (z3f74 z3v73) z3v73))
(push 1)
(assert (not (= (z3f75 z3v99) (z3f82 z3v88))))
(check-sat)
(pop 1)
(pop 1)
(declare-fun z3v100 () Int)
(declare-fun z3v101 () Int)
(declare-fun z3v102 () Int)
(declare-fun z3v103 () Int)
(declare-fun z3f104 (Int) Int)
(declare-fun z3v105 () Int)
(push 1)
(assert (>= (z3f80 z3v105) 0))
(assert (= z3v105 z3v100))
(assert (>= (z3f80 z3v100) 0))
(assert (= (z3f80 z3v100) (z3f104 z3v103)))
(assert (= z3v100 z3v103))
(assert (= (z3f104 z3v103) 6))
(assert (= z3v103 z3v69))
(assert (= z3v102 2))
(assert (>= (z3f80 z3v101) 0))
(assert (= z3v101 z3v100))
(assert (z3f75 z3v71))
(assert (= (z3f74 z3v77) z3v77))
(assert (= (z3f74 z3v76) z3v76))
(assert (not (z3f75 z3v72)))
(assert (= (z3f74 z3v73) z3v73))
(push 1)
(assert (not (>= (z3f80 z3v105) z3v102)))
(check-sat)
(pop 1)
(pop 1)
