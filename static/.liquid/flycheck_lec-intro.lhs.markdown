<pre><span class=hs-linenum>1: </span><span class='hs-varop'>&gt;</span> <span class='hs-definition'>pos</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Integer</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span> 
<span class=hs-linenum>2: </span><span class='hs-varop'>&gt;</span> <a class=annot href="#"><span class=annottext>GHC.Integer.Type.Integer -&gt; GHC.Types.Bool</span><span class='hs-definition'>pos</span></a> <a class=annot href="#"><span class=annottext>GHC.Integer.Type.Integer</span><span class='hs-varid'>x</span></a> <span class='hs-keyglyph'>=</span> <a class=annot href="#"><span class=annottext>{v : GHC.Integer.Type.Integer | v == x}</span><span class='hs-varid'>x</span></a> <a class=annot href="#"><span class=annottext>x1:GHC.Integer.Type.Integer
-&gt; x2:GHC.Integer.Type.Integer
-&gt; {v : GHC.Types.Bool | Prop v &lt;=&gt; x1 &gt; v}</span><span class='hs-varop'>&gt;</span></a> <span class='hs-num'>0</span>
</pre>
<pre><span class=hs-linenum>4: </span><span class='hs-varop'>&gt;</span> <span class='hs-definition'>pat</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int</span><span class='hs-layout'>,</span> <span class='hs-conid'>Int</span><span class='hs-layout'>,</span> <span class='hs-conid'>Int</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span>
<span class=hs-linenum>5: </span><span class='hs-varop'>&gt;</span> <a class=annot href="#"><span class=annottext>(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int) -&gt; GHC.Types.Int</span><span class='hs-definition'>pat</span></a> <span class='hs-layout'>(</span><span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>y</span><span class='hs-layout'>,</span> <span class='hs-varid'>z</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <a class=annot href="#"><span class=annottext>{v : GHC.Types.Int | v == x}</span><span class='hs-varid'>x</span></a> <a class=annot href="#"><span class=annottext>x1:GHC.Types.Int
-&gt; x2:GHC.Types.Int
-&gt; {v : GHC.Types.Int | x1 &gt; 0 &amp;&amp; x2 &gt; 0 =&gt; v &gt;= x1 &amp;&amp; v &gt;= x2 &amp;&amp; x1 &gt; 1 &amp;&amp; x2 &gt; 1 =&gt; v &gt; x1 &amp;&amp; v &gt; x2 &amp;&amp; x1 == 0 || x2 == 0 =&gt; v == 0}</span><span class='hs-varop'>*</span></a> <span class='hs-layout'>(</span><a class=annot href="#"><span class=annottext>{v : GHC.Types.Int | v == y}</span><span class='hs-varid'>y</span></a> <a class=annot href="#"><span class=annottext>x1:GHC.Types.Int
-&gt; x2:GHC.Types.Int -&gt; {v : GHC.Types.Int | v == x1 + x2}</span><span class='hs-varop'>+</span></a> <a class=annot href="#"><span class=annottext>{v : GHC.Types.Int | v == z}</span><span class='hs-varid'>z</span></a> <span class='hs-layout'>)</span>
</pre>
A recursive function

<pre><span class=hs-linenum>9: </span><span class='hs-varop'>&gt;</span> <span class='hs-definition'>clone</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span>
<span class=hs-linenum>10: </span><span class='hs-varop'>&gt;</span> <a class=annot href="#"><span class=annottext>forall a. a -&gt; GHC.Types.Int -&gt; [a]</span><span class='hs-definition'>clone</span></a> <a class=annot href="#"><span class=annottext>a</span><span class='hs-varid'>x</span></a> <a class=annot href="#"><span class=annottext>GHC.Types.Int</span><span class='hs-varid'>n</span></a> <span class='hs-keyglyph'>=</span> <a class=annot href="#"><span class=annottext>GHC.Types.Bool -&gt; [a] -&gt; [a] -&gt; [a]</span><span class='hs-varid'>ifThenElse</span></a> <span class='hs-layout'>(</span><a class=annot href="#"><span class=annottext>{v : GHC.Types.Int | v == n}</span><span class='hs-varid'>n</span></a> <a class=annot href="#"><span class=annottext>x1:GHC.Types.Int
-&gt; x2:GHC.Types.Int -&gt; {v : GHC.Types.Bool | Prop v &lt;=&gt; x1 == v}</span><span class='hs-varop'>==</span></a> <a class=annot href="#"><span class=annottext>{v : GHC.Types.Int | v == (0  :  int)}</span><span class='hs-num'>0</span></a><span class='hs-layout'>)</span> <a class=annot href="#"><span class=annottext>{v : [a] | null v &lt;=&gt; true &amp;&amp; len v == 0 &amp;&amp; len v &gt;= 0}</span><span class='hs-conid'>[]</span></a> <span class='hs-layout'>(</span><a class=annot href="#"><span class=annottext>{VV : a | VV == x}</span><span class='hs-varid'>x</span></a> <a class=annot href="#"><span class=annottext>x1:a
-&gt; x2:[a]
-&gt; {v : [a] | null v &lt;=&gt; false &amp;&amp; xListSelector v == x1 &amp;&amp; len v == 1 + len x2 &amp;&amp; xsListSelector v == x2}</span><span class='hs-conop'>:</span></a> <a class=annot href="#"><span class=annottext>forall a. a -&gt; GHC.Types.Int -&gt; [a]</span><span class='hs-varid'>clone</span></a> <a class=annot href="#"><span class=annottext>{VV : a | VV == x}</span><span class='hs-varid'>x</span></a> <span class='hs-layout'>(</span><span class=hs-error><a class=annot href="#"><span class=annottext>{v : GHC.Types.Int | v == n}</span><span class='hs-varid'>n</span></a></span><span class=hs-error><a class=annot href="#"><span class=annottext>x1:GHC.Types.Int
-&gt; x2:GHC.Types.Int -&gt; {v : GHC.Types.Int | v == x1 - x2}</span><span class='hs-comment'>-</span></a></span><span class=hs-error><a class=annot href="#"><span class=annottext>{v : GHC.Types.Int | v == (1  :  int)}</span><span class='hs-num'>1</span></a></span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> 
</pre>
Cleaner, with "pattern matching"

<pre><span class=hs-linenum>14: </span><span class='hs-varop'>&gt;</span> <a class=annot href="#"><span class=annottext>forall a. a -&gt; GHC.Types.Int -&gt; [a]</span><span class='hs-definition'>clone'</span></a> <a class=annot href="#"><span class=annottext>a</span><span class='hs-varid'>x</span></a> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <a class=annot href="#"><span class=annottext>forall a &lt;p :: a a -&gt; Prop&gt;.
{v : [a]&lt;\x4 VV -&gt; p x4&gt; | null v &lt;=&gt; true &amp;&amp; len v == 0}</span><span class='hs-conid'>[]</span></a>
<span class=hs-linenum>15: </span><span class='hs-varop'>&gt;</span> <span class='hs-definition'>clone'</span> <span class='hs-varid'>x</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=</span> <a class=annot href="#"><span class=annottext>{VV : a | VV == x}</span><span class='hs-varid'>x</span></a> <a class=annot href="#"><span class=annottext>x1:a
-&gt; x2:[a]
-&gt; {v : [a] | null v &lt;=&gt; false &amp;&amp; xListSelector v == x1 &amp;&amp; len v == 1 + len x2 &amp;&amp; xsListSelector v == x2}</span><span class='hs-conop'>:</span></a> <a class=annot href="#"><span class=annottext>a -&gt; GHC.Types.Int -&gt; [a]</span><span class='hs-varid'>clone</span></a> <a class=annot href="#"><span class=annottext>{VV : a | VV == x}</span><span class='hs-varid'>x</span></a> <span class='hs-layout'>(</span><a class=annot href="#"><span class=annottext>GHC.Types.Int</span><span class='hs-varid'>n</span></a><a class=annot href="#"><span class=annottext>x1:GHC.Types.Int
-&gt; x2:GHC.Types.Int -&gt; {v : GHC.Types.Int | v == x1 - x2}</span><span class='hs-comment'>-</span></a><a class=annot href="#"><span class=annottext>{v : GHC.Types.Int | v == (1  :  int)}</span><span class='hs-num'>1</span></a><span class='hs-layout'>)</span>
</pre>
An If-Then-Else function

<pre><span class=hs-linenum>19: </span><span class='hs-varop'>&gt;</span> <a class=annot href="#"><span class=annottext>forall a. GHC.Types.Bool -&gt; a -&gt; a -&gt; a</span><span class='hs-definition'>ifThenElse</span></a> <span class='hs-conid'>True</span> <a class=annot href="#"><span class=annottext>a</span><span class='hs-varid'>thenExpr</span></a> <a class=annot href="#"><span class=annottext>a</span><span class='hs-varid'>elseExpr</span></a>  <span class='hs-keyglyph'>=</span> <a class=annot href="#"><span class=annottext>{VV : a | VV == thenExpr}</span><span class='hs-varid'>thenExpr</span></a>
<span class=hs-linenum>20: </span><span class='hs-varop'>&gt;</span> <span class='hs-definition'>ifThenElse</span> <span class='hs-conid'>False</span> <span class='hs-varid'>thenExpr</span> <span class='hs-varid'>elseExpr</span> <span class='hs-keyglyph'>=</span> <a class=annot href="#"><span class=annottext>{VV : a | VV == elseExpr}</span><span class='hs-varid'>elseExpr</span></a>
</pre>
if True then 1 else error "DIE DEI DIE"
    ===> 1

In JavaScript:

function ifThenElse(cond, thenB, elseB) { 
  return cond ? thenB : elseB ;

ifThenElse(true, 1, alert("DIE DIE DIE"));

<pre><span class=hs-linenum>32: </span><span class='hs-varop'>&gt;</span> <a class=annot href="#"><span class=annottext>forall a.
(GHC.Classes.Ord [Bivariant]
[] a, GHC.Num.Num [Bivariant]
[] a) =&gt;
a -&gt; a -&gt; [a]</span><span class='hs-definition'>rangeIf</span></a> <a class=annot href="#"><span class=annottext>a</span><span class='hs-varid'>lo</span></a> <a class=annot href="#"><span class=annottext>a</span><span class='hs-varid'>hi</span></a> <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>if</span> <a class=annot href="#"><span class=annottext>{VV : a | VV == lo}</span><span class='hs-varid'>lo</span></a> <a class=annot href="#"><span class=annottext>x1:a -&gt; x2:a -&gt; {v : GHC.Types.Bool | Prop v &lt;=&gt; x1 &gt; v}</span><span class='hs-varop'>&gt;</span></a> <a class=annot href="#"><span class=annottext>{VV : a | VV == hi}</span><span class='hs-varid'>hi</span></a> 
<span class=hs-linenum>33: </span><span class='hs-varop'>&gt;</span>                   <span class='hs-keyword'>then</span> <a class=annot href="#"><span class=annottext>forall a &lt;p :: a a -&gt; Prop&gt;.
{v : [a]&lt;\x4 VV -&gt; p x4&gt; | null v &lt;=&gt; true &amp;&amp; len v == 0}</span><span class='hs-conid'>[]</span></a> 
<span class=hs-linenum>34: </span><span class='hs-varop'>&gt;</span>                   <span class='hs-keyword'>else</span> <a class=annot href="#"><span class=annottext>{VV : a | VV == lo}</span><span class='hs-varid'>lo</span></a> <a class=annot href="#"><span class=annottext>x1:a
-&gt; x2:[a]
-&gt; {v : [a] | null v &lt;=&gt; false &amp;&amp; xListSelector v == x1 &amp;&amp; len v == 1 + len x2 &amp;&amp; xsListSelector v == x2}</span><span class='hs-conop'>:</span></a> <span class='hs-layout'>(</span><a class=annot href="#"><span class=annottext>forall a.
(GHC.Classes.Ord [Bivariant]
[] a, GHC.Num.Num [Bivariant]
[] a) =&gt;
a -&gt; a -&gt; [a]</span><span class='hs-varid'>rangeIf</span></a> <span class='hs-layout'>(</span><a class=annot href="#"><span class=annottext>{VV : a | VV == lo}</span><span class='hs-varid'>lo</span></a><a class=annot href="#"><span class=annottext>x1:a -&gt; x2:a -&gt; {VV : a | VV == x1 + x2}</span><span class='hs-varop'>+</span></a><a class=annot href="#"><span class=annottext>a</span><span class='hs-num'>1</span></a><span class='hs-layout'>)</span> <a class=annot href="#"><span class=annottext>{VV : a | VV == hi}</span><span class='hs-varid'>hi</span></a><span class='hs-layout'>)</span>
</pre>
<pre><span class=hs-linenum>36: </span><span class='hs-varop'>&gt;</span> <a class=annot href="#"><span class=annottext>forall a.
(GHC.Classes.Ord [Bivariant]
[] a, GHC.Num.Num [Bivariant]
[] a) =&gt;
a -&gt; a -&gt; [a]</span><span class='hs-definition'>range</span></a> <a class=annot href="#"><span class=annottext>a</span><span class='hs-varid'>lo</span></a> <a class=annot href="#"><span class=annottext>a</span><span class='hs-varid'>hi</span></a> 
<span class=hs-linenum>37: </span><span class='hs-varop'>&gt;</span>   <span class='hs-keyglyph'>|</span> <a class=annot href="#"><span class=annottext>{VV : a | VV == lo}</span><span class='hs-varid'>lo</span></a> <a class=annot href="#"><span class=annottext>x1:a -&gt; x2:a -&gt; {v : GHC.Types.Bool | Prop v &lt;=&gt; x1 &gt; v}</span><span class='hs-varop'>&gt;</span></a> <a class=annot href="#"><span class=annottext>{VV : a | VV == hi}</span><span class='hs-varid'>hi</span></a>   <span class='hs-keyglyph'>=</span> <a class=annot href="#"><span class=annottext>forall a &lt;p :: a a -&gt; Prop&gt;.
{v : [a]&lt;\x4 VV -&gt; p x4&gt; | null v &lt;=&gt; true &amp;&amp; len v == 0}</span><span class='hs-conid'>[]</span></a>
<span class=hs-linenum>38: </span><span class='hs-varop'>&gt;</span>   <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <a class=annot href="#"><span class=annottext>{VV : a | VV == lo}</span><span class='hs-varid'>lo</span></a> <a class=annot href="#"><span class=annottext>x1:a
-&gt; x2:[a]
-&gt; {v : [a] | null v &lt;=&gt; false &amp;&amp; xListSelector v == x1 &amp;&amp; len v == 1 + len x2 &amp;&amp; xsListSelector v == x2}</span><span class='hs-conop'>:</span></a> <a class=annot href="#"><span class=annottext>forall a.
(GHC.Classes.Ord [Bivariant]
[] a, GHC.Num.Num [Bivariant]
[] a) =&gt;
a -&gt; a -&gt; [a]</span><span class='hs-varid'>range</span></a> <span class='hs-layout'>(</span><a class=annot href="#"><span class=annottext>{VV : a | VV == lo}</span><span class='hs-varid'>lo</span></a> <a class=annot href="#"><span class=annottext>x1:a -&gt; x2:a -&gt; {VV : a | VV == x1 + x2}</span><span class='hs-varop'>+</span></a> <a class=annot href="#"><span class=annottext>a</span><span class='hs-num'>1</span></a><span class='hs-layout'>)</span> <a class=annot href="#"><span class=annottext>{VV : a | VV == hi}</span><span class='hs-varid'>hi</span></a>
</pre>

<pre><span class=hs-linenum>41: </span><span class='hs-varop'>&gt;</span> <span class='hs-definition'>listAdd</span>        <span class='hs-keyglyph'>::</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>Int</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span>
<span class=hs-linenum>42: </span><span class='hs-varop'>&gt;</span> <a class=annot href="#"><span class=annottext>[GHC.Types.Int] -&gt; GHC.Types.Int</span><span class='hs-definition'>listAdd</span></a> <span class='hs-conid'>[]</span>     <span class='hs-keyglyph'>=</span> <a class=annot href="#"><span class=annottext>x1:GHC.Prim.Int# -&gt; {v : GHC.Types.Int | v == (x1  :  int)}</span><span class='hs-num'>0</span></a>
<span class=hs-linenum>43: </span><span class='hs-varop'>&gt;</span> <span class='hs-definition'>listAdd</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span><span class='hs-conop'>:</span><span class='hs-varid'>xs</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <a class=annot href="#"><span class=annottext>{v : GHC.Types.Int | v == x}</span><span class='hs-varid'>x</span></a> <a class=annot href="#"><span class=annottext>x1:GHC.Types.Int
-&gt; x2:GHC.Types.Int -&gt; {v : GHC.Types.Int | v == x1 + x2}</span><span class='hs-varop'>+</span></a> <a class=annot href="#"><span class=annottext>[GHC.Types.Int] -&gt; GHC.Types.Int</span><span class='hs-varid'>listAdd</span></a> <a class=annot href="#"><span class=annottext>{v : [GHC.Types.Int] | v == xs &amp;&amp; len v &gt;= 0}</span><span class='hs-varid'>xs</span></a>
</pre>


data Circle = C Double Double Double
data Square = S Double Double Double
areaCircle (C x y r) = pi * r * r
areaSquare (S x y d) = d * d


<pre><span class=hs-linenum>53: </span><span class='hs-varop'>&gt;</span> <span class='hs-keyword'>data</span> <span class='hs-conid'>Shape</span>  <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Circle</span> <span class='hs-conid'>Double</span> <span class='hs-conid'>Double</span> <span class='hs-conid'>Double</span>
<span class=hs-linenum>54: </span><span class='hs-varop'>&gt;</span>             <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Square</span> <span class='hs-conid'>Double</span> <span class='hs-conid'>Double</span> <span class='hs-conid'>Double</span>
<span class=hs-linenum>55: </span><span class='hs-varop'>&gt;</span>             <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Poly</span> <span class='hs-keyglyph'>[</span><span class='hs-layout'>(</span><span class='hs-conid'>Double</span><span class='hs-layout'>,</span> <span class='hs-conid'>Double</span><span class='hs-layout'>)</span><span class='hs-keyglyph'>]</span>
<span class=hs-linenum>56: </span><span class='hs-varop'>&gt;</span>             <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><a class=annot href="#"><span class=annottext>(GHC.Show.Show Main.Shape)</span><span class='hs-conid'>Show</span></a><span class='hs-layout'>)</span>
</pre>
<pre><span class=hs-linenum>58: </span><span class='hs-varop'>&gt;</span> <a class=annot href="#"><span class=annottext>Main.Shape -&gt; GHC.Types.Double</span><span class='hs-definition'>area</span></a> <span class='hs-layout'>(</span><span class='hs-conid'>Circle</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>    <span class='hs-keyglyph'>=</span> <a class=annot href="#"><span class=annottext>GHC.Types.Double</span><span class='hs-varid'>pi</span></a> <a class=annot href="#"><span class=annottext>x1:GHC.Types.Double
-&gt; x2:GHC.Types.Double
-&gt; {v : GHC.Types.Double | x1 &gt; 0 &amp;&amp; x2 &gt; 0 =&gt; v &gt;= x1 &amp;&amp; v &gt;= x2 &amp;&amp; x1 &gt; 1 &amp;&amp; x2 &gt; 1 =&gt; v &gt; x1 &amp;&amp; v &gt; x2 &amp;&amp; x1 == 0 || x2 == 0 =&gt; v == 0}</span><span class='hs-varop'>*</span></a> <a class=annot href="#"><span class=annottext>{v : GHC.Types.Double | v == r}</span><span class='hs-varid'>r</span></a> <a class=annot href="#"><span class=annottext>x1:GHC.Types.Double
-&gt; x2:GHC.Types.Double
-&gt; {v : GHC.Types.Double | x1 &gt; 0 &amp;&amp; x2 &gt; 0 =&gt; v &gt;= x1 &amp;&amp; v &gt;= x2 &amp;&amp; x1 &gt; 1 &amp;&amp; x2 &gt; 1 =&gt; v &gt; x1 &amp;&amp; v &gt; x2 &amp;&amp; x1 == 0 || x2 == 0 =&gt; v == 0}</span><span class='hs-varop'>*</span></a> <a class=annot href="#"><span class=annottext>{v : GHC.Types.Double | v == r}</span><span class='hs-varid'>r</span></a>
<span class=hs-linenum>59: </span><span class='hs-varop'>&gt;</span> <span class='hs-definition'>area</span> <span class='hs-layout'>(</span><span class='hs-conid'>Square</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>d</span><span class='hs-layout'>)</span>    <span class='hs-keyglyph'>=</span> <a class=annot href="#"><span class=annottext>{v : GHC.Types.Double | v == d}</span><span class='hs-varid'>d</span></a> <a class=annot href="#"><span class=annottext>x1:GHC.Types.Double
-&gt; x2:GHC.Types.Double
-&gt; {v : GHC.Types.Double | x1 &gt; 0 &amp;&amp; x2 &gt; 0 =&gt; v &gt;= x1 &amp;&amp; v &gt;= x2 &amp;&amp; x1 &gt; 1 &amp;&amp; x2 &gt; 1 =&gt; v &gt; x1 &amp;&amp; v &gt; x2 &amp;&amp; x1 == 0 || x2 == 0 =&gt; v == 0}</span><span class='hs-varop'>*</span></a> <a class=annot href="#"><span class=annottext>{v : GHC.Types.Double | v == d}</span><span class='hs-varid'>d</span></a>
<span class=hs-linenum>60: </span><span class='hs-varop'>&gt;</span> <span class='hs-definition'>area</span> <span class='hs-layout'>(</span><span class='hs-conid'>Poly</span> <span class='hs-varid'>ps</span><span class='hs-layout'>)</span>         <span class='hs-keyglyph'>=</span> <a class=annot href="#"><span class=annottext>[(GHC.Types.Double, GHC.Types.Double)] -&gt; GHC.Types.Double</span><span class='hs-varid'>areaPoly</span></a> <a class=annot href="#"><span class=annottext>{v : [(GHC.Types.Double, GHC.Types.Double)] | v == ps &amp;&amp; len v &gt;= 0}</span><span class='hs-varid'>ps</span></a>
<span class=hs-linenum>61: </span><span class='hs-varop'>&gt;</span> 
<span class=hs-linenum>62: </span><span class='hs-varop'>&gt;</span> <a class=annot href="#"><span class=annottext>forall a b. (GHC.Num.Num [Bivariant]
[] b) =&gt; [a] -&gt; b</span><span class='hs-definition'>areaPoly</span></a> <span class='hs-layout'>(</span><span class='hs-varid'>p1</span><span class='hs-conop'>:</span><span class='hs-varid'>p2</span><span class='hs-conop'>:</span><span class='hs-varid'>p3</span><span class='hs-conop'>:</span><span class='hs-varid'>rest</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <a class=annot href="#"><span class=annottext>a -&gt; a -&gt; a -&gt; {VV : b | false}</span><span class='hs-varid'>areaTriangle</span></a> <a class=annot href="#"><span class=annottext>{VV : a | VV == p1}</span><span class='hs-varid'>p1</span></a> <a class=annot href="#"><span class=annottext>{VV : a | VV == p2}</span><span class='hs-varid'>p2</span></a> <a class=annot href="#"><span class=annottext>{VV : a | VV == p3}</span><span class='hs-varid'>p3</span></a> <a class=annot href="#"><span class=annottext>x1:a -&gt; x2:a -&gt; {VV : a | VV == x1 + x2}</span><span class='hs-varop'>+</span></a> <a class=annot href="#"><span class=annottext>forall a b. (GHC.Num.Num [Bivariant]
[] b) =&gt; [a] -&gt; b</span><span class='hs-varid'>areaPoly</span></a> <span class='hs-layout'>(</span><a class=annot href="#"><span class=annottext>{VV : a | VV == p1}</span><span class='hs-varid'>p1</span></a><a class=annot href="#"><span class=annottext>x1:a
-&gt; x2:[a]
-&gt; {v : [a] | null v &lt;=&gt; false &amp;&amp; xListSelector v == x1 &amp;&amp; len v == 1 + len x2 &amp;&amp; xsListSelector v == x2}</span><span class='hs-conop'>:</span></a><a class=annot href="#"><span class=annottext>{VV : a | VV == p3}</span><span class='hs-varid'>p3</span></a><a class=annot href="#"><span class=annottext>x1:a
-&gt; x2:[a]
-&gt; {v : [a] | null v &lt;=&gt; false &amp;&amp; xListSelector v == x1 &amp;&amp; len v == 1 + len x2 &amp;&amp; xsListSelector v == x2}</span><span class='hs-conop'>:</span></a><a class=annot href="#"><span class=annottext>{v : [a] | v == rest &amp;&amp; len v &gt;= 0}</span><span class='hs-varid'>rest</span></a><span class='hs-layout'>)</span>
<span class=hs-linenum>63: </span><span class='hs-varop'>&gt;</span> <span class='hs-definition'>areaPoly</span> <span class='hs-keyword'>_</span>               <span class='hs-keyglyph'>=</span> <a class=annot href="#"><span class=annottext>{v : GHC.Integer.Type.Integer | v == 0}</span><span class='hs-num'>0</span></a>
</pre>

<pre><span class=hs-linenum>66: </span><span class='hs-varop'>&gt;</span> <a class=annot href="#"><span class=annottext>forall a. a</span><span class='hs-definition'>areaTriangle</span></a> <span class='hs-keyglyph'>=</span> <a class=annot href="#"><span class=annottext>forall a. a</span><span class='hs-varid'>undefined</span></a>
</pre>
<pre><span class=hs-linenum>68: </span><span class='hs-varop'>&gt;</span> <a class=annot href="#"><span class=annottext>Main.Shape</span><span class='hs-definition'>c0</span></a> <span class='hs-keyglyph'>=</span> <a class=annot href="#"><span class=annottext>GHC.Types.Double
-&gt; GHC.Types.Double -&gt; GHC.Types.Double -&gt; Main.Shape</span><span class='hs-conid'>Circle</span></a> <a class=annot href="#"><span class=annottext>{v : GHC.Types.Double | v == 0.0}</span><span class='hs-num'>0</span></a> <a class=annot href="#"><span class=annottext>{v : GHC.Types.Double | v == 0.0}</span><span class='hs-num'>0</span></a> <a class=annot href="#"><span class=annottext>{v : GHC.Types.Double | v == 2.3}</span><span class='hs-num'>2.3</span></a>
<span class=hs-linenum>69: </span><span class='hs-varop'>&gt;</span> <a class=annot href="#"><span class=annottext>Main.Shape</span><span class='hs-definition'>c1</span></a> <span class='hs-keyglyph'>=</span> <a class=annot href="#"><span class=annottext>GHC.Types.Double
-&gt; GHC.Types.Double -&gt; GHC.Types.Double -&gt; Main.Shape</span><span class='hs-conid'>Circle</span></a> <a class=annot href="#"><span class=annottext>{v : GHC.Types.Double | v == 0.0}</span><span class='hs-num'>0</span></a> <a class=annot href="#"><span class=annottext>{v : GHC.Types.Double | v == 1.0}</span><span class='hs-num'>1</span></a> <a class=annot href="#"><span class=annottext>{v : GHC.Types.Double | v == 1.31}</span><span class='hs-num'>1.31</span></a>
<span class=hs-linenum>70: </span><span class='hs-varop'>&gt;</span> <a class=annot href="#"><span class=annottext>Main.Shape</span><span class='hs-definition'>s0</span></a> <span class='hs-keyglyph'>=</span> <a class=annot href="#"><span class=annottext>GHC.Types.Double
-&gt; GHC.Types.Double -&gt; GHC.Types.Double -&gt; Main.Shape</span><span class='hs-conid'>Square</span></a> <a class=annot href="#"><span class=annottext>{v : GHC.Types.Double | v == 12.0}</span><span class='hs-num'>12</span></a> <a class=annot href="#"><span class=annottext>{v : GHC.Types.Double | v == 1.0}</span><span class='hs-num'>1</span></a> <a class=annot href="#"><span class=annottext>{v : GHC.Types.Double | v == 12312.0}</span><span class='hs-num'>12312</span></a>
<span class=hs-linenum>71: </span><span class='hs-varop'>&gt;</span> <a class=annot href="#"><span class=annottext>Main.Shape</span><span class='hs-definition'>p0</span></a> <span class='hs-keyglyph'>=</span> <a class=annot href="#"><span class=annottext>[(GHC.Types.Double, GHC.Types.Double)] -&gt; Main.Shape</span><span class='hs-conid'>Poly</span></a>   <a class=annot href="#"><span class=annottext>{v : [(GHC.Types.Double, GHC.Types.Double)] | null v &lt;=&gt; false &amp;&amp; len v &gt;= 0}</span><span class='hs-keyglyph'>[</span></a><a class=annot href="#"><span class=annottext>(GHC.Types.Double, GHC.Types.Double)</span><span class='hs-layout'>(</span></a><a class=annot href="#"><span class=annottext>{v : GHC.Types.Double | v == 0.0}</span><span class='hs-num'>0</span></a><span class='hs-layout'>,</span><a class=annot href="#"><span class=annottext>{v : GHC.Types.Double | v == 0.0}</span><span class='hs-num'>0</span></a><span class='hs-layout'>)</span><span class='hs-layout'>,</span> <a class=annot href="#"><span class=annottext>(GHC.Types.Double, GHC.Types.Double)</span><span class='hs-layout'>(</span></a><a class=annot href="#"><span class=annottext>{v : GHC.Types.Double | v == 4.0}</span><span class='hs-num'>4</span></a><span class='hs-layout'>,</span><a class=annot href="#"><span class=annottext>{v : GHC.Types.Double | v == 4.0}</span><span class='hs-num'>4</span></a><span class='hs-layout'>)</span><span class='hs-layout'>,</span> <a class=annot href="#"><span class=annottext>(GHC.Types.Double, GHC.Types.Double)</span><span class='hs-layout'>(</span></a><a class=annot href="#"><span class=annottext>{v : GHC.Types.Double | v == 92.0}</span><span class='hs-num'>92</span></a><span class='hs-layout'>,</span> <a class=annot href="#"><span class=annottext>{v : GHC.Types.Double | v == 92.0}</span><span class='hs-num'>92</span></a><span class='hs-layout'>)</span><span class='hs-keyglyph'>]</span>
</pre>


<pre><span class=hs-linenum>75: </span><span class='hs-varop'>&gt;</span> <a class=annot href="#"><span class=annottext>(GHC.Types.IO ())</span><span class='hs-definition'>act1</span></a> <span class='hs-keyglyph'>=</span> <a class=annot href="#"><span class=annottext>[GHC.Types.Char] -&gt; (GHC.Types.IO ())</span><span class='hs-varid'>putStrLn</span></a> <a class=annot href="#"><span class=annottext>{v : [GHC.Types.Char] | len v &gt;= 0}</span><span class='hs-str'>"This is a string on a line"</span></a>
<span class=hs-linenum>76: </span><span class='hs-varop'>&gt;</span> <a class=annot href="#"><span class=annottext>(GHC.Types.IO ())</span><span class='hs-definition'>act2</span></a> <span class='hs-keyglyph'>=</span> <a class=annot href="#"><span class=annottext>[GHC.Types.Char] -&gt; (GHC.Types.IO ())</span><span class='hs-varid'>putStrLn</span></a> <a class=annot href="#"><span class=annottext>{v : [GHC.Types.Char] | len v &gt;= 0}</span><span class='hs-str'>"This is another string on a line"</span></a>
<span class=hs-linenum>77: </span><span class='hs-varop'>&gt;</span> <a class=annot href="#"><span class=annottext>(GHC.Types.IO ())</span><span class='hs-definition'>act3</span></a> <span class='hs-keyglyph'>=</span> <a class=annot href="#"><span class=annottext>[GHC.Types.Char] -&gt; (GHC.Types.IO ())</span><span class='hs-varid'>putStrLn</span></a> <a class=annot href="#"><span class=annottext>{v : [GHC.Types.Char] | len v &gt;= 0}</span><span class='hs-str'>"This is the last string i promise you"</span></a>
</pre>








main = do putStrLn "What is your name ?"
          n <- getLine
          putStrLn ("Happy New Year " ++ n)
