//qualif NonNull(v: [a])        : (? (nonnull([v])))
//qualif Null(v: [a])           : (~ (? (nonnull([v]))))
//qualif EqNull(v:Bool, ~A: [a]): (Prop(v) <=> (? (nonnull([~A]))))

qualif IsEmp(v:GHC.Types.Bool, ~A: [a]) : (Prop(v) <=> len([~A]) [ > ;  = ] 0)
qualif ListZ(v: [a])          : len([v]) [ = ; >= ; > ] 0 
qualif CmpLen(v:[a], ~A:[b])  : len([v]) [= ; >=; >; <=; <] len([~A]) 
qualif EqLen(v:int, ~A: [a])  : v = len([~A]) 
qualif LenEq(v:[a], ~A: int)  : ~A = len([v]) 
qualif LenAcc(v:int, ~A:[a], ~B: int): v = len([~A]) + ~B
qualif LenDiff(v:[a], ~A:int): len([v]) = (~A [ +; - ] 1)
//BOT: Do not delete EVER!

qualif Bot(v:@(0))    : 0 = 1 
qualif Bot(v:obj)     : 0 = 1 
qualif Bot(v:a)       : 0 = 1 
qualif Bot(v:bool)    : 0 = 1 
qualif Bot(v:int)     : 0 = 1 
qualif CmpZ(v:a)      : v [ < ; <= ; > ; >= ; = ; != ] 0
qualif Cmp(v:a,~A:a)  : v [ < ; <= ; > ; >= ; = ; != ] ~A
qualif Cmp(v:int,~A:int)  : v [ < ; <= ; > ; >= ; = ; != ] ~A
qualif One(v:int)     : v = 1
qualif True(v:bool)   : (? v) 
qualif False(v:bool)  : ~ (? v) 
qualif True1(v:GHC.Types.Bool)   : Prop(v)
qualif False1(v:GHC.Types.Bool)  : ~ Prop(v)


qualif Papp(v:a,~P:Pred a) : papp1(~P, v)
constant papp1 : func(1, [Pred @(0); @(0); bool])

qualif Papp2(v:a,~X:b,~P:Pred a b) : papp2(~P, v, ~X)
constant papp2 : func(4, [Pred @(0) @(1); @(2); @(3); bool])

qualif Papp3(v:a,~X:b, ~Y:c, ~P:Pred a b c) : papp3(~P, v, ~X, ~Y)
constant papp3 : func(6, [Pred @(0) @(1) @(2); @(3); @(4); @(5); bool])

constant Prop : func(0, [GHC.Types.Bool; bool])
qualif Fst(v : a, fix##126#Y : b): (v = fst([fix##126#Y]))
qualif Snd(v : a, fix##126#Y : b): (v = snd([fix##126#Y]))

constant Prop : func(0, [GHC.Types.Bool; bool])
constant x_Tuple64 : func(6, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5);
                              @(3)])
constant x_Tuple54 : func(5, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4);
                              @(3)])
constant x_Tuple44 : func(4, [FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3);
                              @(3)])
constant xListSelector : func(1, [[@(0)]; @(0)])
constant x_Tuple41 : func(4, [FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3);
                              @(0)])
constant x_Tuple76 : func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                              @(5)])
constant addrLen : func(0, [int; int])
constant x_Tuple52 : func(5, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4);
                              @(1)])
constant x_Tuple75 : func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                              @(4)])
constant x_Tuple33 : func(3, [FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2);
                              @(2)])
constant fst : func(2, [FAppTy (FAppTy fix##40##41#  @(0))  @(1);
                        @(0)])
constant x_Tuple73 : func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                              @(2)])
constant x_Tuple55 : func(5, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4);
                              @(4)])
constant x_Tuple31 : func(3, [FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2);
                              @(0)])
constant x_Tuple43 : func(4, [FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3);
                              @(2)])
constant x_Tuple71 : func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                              @(0)])
constant x_Tuple65 : func(6, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5);
                              @(4)])
constant x_Tuple32 : func(3, [FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2);
                              @(1)])
constant GHC.Types.False#68 : GHC.Types.Bool
constant x_Tuple72 : func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                              @(1)])
constant x_Tuple63 : func(6, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5);
                              @(2)])
constant len : func(1, [[@(0)]; int])
constant xsListSelector : func(1, [[@(0)]; [@(0)]])
constant null : func(1, [[@(0)]; bool])
constant x_Tuple53 : func(5, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4);
                              @(2)])
constant x_Tuple22 : func(2, [FAppTy (FAppTy fix##40##41#  @(0))  @(1);
                              @(1)])
constant fromJust : func(1, [FAppTy Data.Maybe.Maybe  @(0); @(0)])
constant snd : func(2, [FAppTy (FAppTy fix##40##41#  @(0))  @(1);
                        @(1)])
constant x_Tuple62 : func(6, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5);
                              @(1)])
constant x_Tuple74 : func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                              @(3)])
constant cmp : func(0, [GHC.Types.Ordering; GHC.Types.Ordering])
constant x_Tuple42 : func(4, [FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3);
                              @(1)])
constant x_Tuple51 : func(5, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4);
                              @(0)])
constant x_Tuple21 : func(2, [FAppTy (FAppTy fix##40##41#  @(0))  @(1);
                              @(0)])
constant x_Tuple61 : func(6, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5);
                              @(0)])
constant x_Tuple66 : func(6, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5);
                              @(5)])
constant GHC.Types.True#6u : GHC.Types.Bool
constant isJust : func(1, [FAppTy Data.Maybe.Maybe  @(0); bool])
constant x_Tuple77 : func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                              @(6)])
constant fix#GHC.Types.#58##35#64 : func(1, [@(0); [@(0)]; [@(0)]])
constant fix#GHC.Types.#91##93##35#6m : func(1, [[@(0)]])
constant fix#GHC.Tuple.#40##44##44##41##35#76 : func(3, [@(0);
                                                         @(1);
                                                         @(2);
                                                         FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2)])
constant fix#GHC.Tuple.#40##44##41##35#74 : func(2, [@(0);
                                                     @(1);
                                                     FAppTy (FAppTy fix##40##41#  @(0))  @(1)])
bind 0 GHC.CString.unpackCString##0k : {VV : func(0, [int;
                                                      [GHC.Types.Char]]) | []}
bind 1 GHC.Prim.void##0l : {VV#558 : GHC.Prim.Void# | []}
bind 2 GHC.Types.C##62 : {VV : func(0, [GHC.Prim.Char#;
                                        GHC.Types.Char]) | []}
bind 3 GHC.Types.D##66 : {VV : func(0, [real; real]) | []}
bind 4 GHC.Types.False#68 : {VV#569 : GHC.Types.Bool | []}
bind 5 GHC.Types.I##6c : {VV : func(0, [int; int]) | []}
bind 6 GHC.Types.True#6u : {VV#572 : GHC.Types.Bool | []}
bind 7 System.IO.putStrLn#r1l : {VV : func(0, [[GHC.Types.Char];
                                               FAppTy GHC.Types.IO  fix##40##41#]) | []}
bind 8 System.IO.getLine#r1p : {VV#581 : FAppTy GHC.Types.IO  ([GHC.Types.Char]) | []}
bind 9 fix#GHC.Base.#36#fMonadIO#35#r2L : {VV#582 : FAppTy GHC.Base.Monad  GHC.Types.IO | []}
bind 10 fix#GHC.Float.#36#fFloatingDouble#35#r7W : {VV#583 : FAppTy GHC.Float.Floating  real | []}
bind 11 fix#GHC.Float.#36#fNumDouble#35#r8s : {VV#584 : FAppTy GHC.Num.Num  real | []}
bind 12 fix#GHC.Integer.Type.#36#fOrdInteger#35#rhv : {VV#585 : FAppTy GHC.Classes.Ord  int | []}
bind 13 fix#GHC.Classes.#36#fOrdInt#35#rhx : {VV#586 : FAppTy GHC.Classes.Ord  int | []}
bind 14 fix#GHC.Num.#36#fNumInt#35#rhy : {VV#587 : FAppTy GHC.Num.Num  int | []}
bind 15 fix#GHC.Integer.Type.#36#fEqInteger#35#rqx : {VV#588 : FAppTy GHC.Classes.Eq  int | []}
bind 16 Main.C#rpA : {VV : func(0, [real;
                                    real;
                                    real;
                                    Main.Shape]) | []}
bind 17 Main.S#rpz : {VV : func(0, [real;
                                    real;
                                    real;
                                    Main.Shape]) | []}
bind 18 GHC.Types.EQ#6U : {VV#592 : GHC.Types.Ordering | []}
bind 19 GHC.Types.LT#6S : {VV#593 : GHC.Types.Ordering | []}
bind 20 GHC.Types.GT#6W : {VV#594 : GHC.Types.Ordering | []}
bind 21 GHC.Types.True#6u : {v : GHC.Types.Bool | [(? Prop([v]))]}
bind 22 GHC.Types.False#68 : {v : GHC.Types.Bool | [(~ ((? Prop([v]))))]}
bind 23 GHC.Types.D##66 : {VV : func(0, [real; real]) | []}
bind 24 GHC.Integer.Type.smallInteger#0Z : {VV : func(0, [int;
                                                          int]) | []}
bind 25 GHC.Types.I##6c : {VV : func(0, [int; int]) | []}
bind 26 fix#GHC.Prim.#43##35##35#98 : {VV : func(0, [int;
                                                     int;
                                                     int]) | []}
bind 27 fix#GHC.Prim.#45##35##35#99 : {VV : func(0, [int;
                                                     int;
                                                     int]) | []}
bind 28 fix#GHC.Prim.#61##61##35##35#9o : {VV : func(0, [int;
                                                         int;
                                                         int]) | []}
bind 29 fix#GHC.Prim.#62##61##35##35#9n : {VV : func(0, [int;
                                                         int;
                                                         int]) | []}
bind 30 fix#GHC.Prim.#60##61##35##35#9r : {VV : func(0, [int;
                                                         int;
                                                         int]) | []}
bind 31 fix#GHC.Prim.#60##35##35#9q : {VV : func(0, [int;
                                                     int;
                                                     int]) | []}
bind 32 fix#GHC.Prim.#62##35##35#9m : {VV : func(0, [int;
                                                     int;
                                                     int]) | []}
bind 33 GHC.Types.EQ#6U : {VV#619 : GHC.Types.Ordering | [(cmp([VV#619]) = GHC.Types.EQ#6U)]}
bind 34 GHC.Types.LT#6S : {VV#621 : GHC.Types.Ordering | [(cmp([VV#621]) = GHC.Types.LT#6S)]}
bind 35 GHC.Types.GT#6W : {VV#622 : GHC.Types.Ordering | [(cmp([VV#622]) = GHC.Types.GT#6W)]}