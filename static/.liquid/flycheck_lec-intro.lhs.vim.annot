2:3-2:6::Main.pos :: "GHC.Integer.Type.Integer -> GHC.Types.Bool"
2:7-2:8::x :: "GHC.Integer.Type.Integer"
2:11-2:12::x :: "{v : GHC.Integer.Type.Integer | v == x}"
2:13-2:14::_ :: "x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Types.Bool | Prop v <=> x1 > v}"
5:3-5:6::Main.pat :: "(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int) -> GHC.Types.Int"
5:19-5:20::x :: "{v : GHC.Types.Int | v == x}"
5:21-5:22::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n-> {v : GHC.Types.Int | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}"
5:24-5:25::y :: "{v : GHC.Types.Int | v == y}"
5:26-5:27::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 + x2}"
5:28-5:29::z :: "{v : GHC.Types.Int | v == z}"
10:3-10:8::Main.clone :: "forall a. a -> GHC.Types.Int -> [a]"
10:9-10:10::x :: "a"
10:11-10:12::n :: "GHC.Types.Int"
10:15-10:25::_ :: "GHC.Types.Bool -> [a] -> [a] -> [a]"
10:27-10:28::n :: "{v : GHC.Types.Int | v == n}"
10:29-10:31::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int -> {v : GHC.Types.Bool | Prop v <=> x1 == v}"
10:32-10:33::lq_anf__d1u3 :: "{v : GHC.Types.Int | v == (0  :  int)}"
10:35-10:37::lq_anf__d1u5 :: "{v : [a] | null v <=> true && len v == 0 && len v >= 0}"
10:39-10:40::x :: "{VV : a | VV == x}"
10:41-10:42::_ :: "x1:a\n-> x2:[a]\n-> {v : [a] | null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
10:43-10:48::Main.clone :: "forall a. a -> GHC.Types.Int -> [a]"
10:49-10:50::x :: "{VV : a | VV == x}"
10:52-10:53::n :: "{v : GHC.Types.Int | v == n}"
10:53-10:54::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 - x2}"
10:54-10:55::lq_anf__d1u6 :: "{v : GHC.Types.Int | v == (1  :  int)}"
14:3-14:9::Main.clone' :: "forall a. a -> GHC.Types.Int -> [a]"
14:10-14:11::x :: "a"
14:16-14:18::GHC.Types.[] :: "forall a <p :: a a -> Prop>.\n{v : [a]<\\x4 VV -> p x4> | null v <=> true && len v == 0}"
15:16-15:17::x :: "{VV : a | VV == x}"
15:18-15:19::_ :: "x1:a\n-> x2:[a]\n-> {v : [a] | null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
15:20-15:25::_ :: "a -> GHC.Types.Int -> [a]"
15:26-15:27::x :: "{VV : a | VV == x}"
15:29-15:30::ds_d1sr :: "GHC.Types.Int"
15:30-15:31::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 - x2}"
15:31-15:32::lq_anf__d1uc :: "{v : GHC.Types.Int | v == (1  :  int)}"
19:3-19:13::Main.ifThenElse :: "forall a. GHC.Types.Bool -> a -> a -> a"
19:19-19:27::thenExpr :: "a"
19:28-19:36::elseExpr :: "a"
19:40-19:48::thenExpr :: "{VV : a | VV == thenExpr}"
20:40-20:48::elseExpr :: "{VV : a | VV == elseExpr}"
32:3-32:10::Main.rangeIf :: "forall a.\n(GHC.Classes.Ord [Bivariant]\n[] a, GHC.Num.Num [Bivariant]\n[] a) =>\na -> a -> [a]"
32:11-32:13::lo :: "a"
32:14-32:16::hi :: "a"
32:22-32:24::lo :: "{VV : a | VV == lo}"
32:25-32:26::_ :: "x1:a -> x2:a -> {v : GHC.Types.Bool | Prop v <=> x1 > v}"
32:27-32:29::hi :: "{VV : a | VV == hi}"
33:26-33:28::GHC.Types.[] :: "forall a <p :: a a -> Prop>.\n{v : [a]<\\x4 VV -> p x4> | null v <=> true && len v == 0}"
34:26-34:28::lo :: "{VV : a | VV == lo}"
34:29-34:30::_ :: "x1:a\n-> x2:[a]\n-> {v : [a] | null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
34:32-34:39::Main.rangeIf :: "forall a.\n(GHC.Classes.Ord [Bivariant]\n[] a, GHC.Num.Num [Bivariant]\n[] a) =>\na -> a -> [a]"
34:41-34:43::lo :: "{VV : a | VV == lo}"
34:43-34:44::_ :: "x1:a -> x2:a -> {VV : a | VV == x1 + x2}"
34:44-34:45::lq_anf__d1ti :: "a"
34:47-34:49::hi :: "{VV : a | VV == hi}"
36:3-36:8::Main.range :: "forall a.\n(GHC.Classes.Ord [Bivariant]\n[] a, GHC.Num.Num [Bivariant]\n[] a) =>\na -> a -> [a]"
36:9-36:11::lo :: "a"
36:12-36:14::hi :: "a"
37:7-37:9::lo :: "{VV : a | VV == lo}"
37:10-37:11::_ :: "x1:a -> x2:a -> {v : GHC.Types.Bool | Prop v <=> x1 > v}"
37:12-37:14::hi :: "{VV : a | VV == hi}"
37:19-37:21::GHC.Types.[] :: "forall a <p :: a a -> Prop>.\n{v : [a]<\\x4 VV -> p x4> | null v <=> true && len v == 0}"
38:19-38:21::lo :: "{VV : a | VV == lo}"
38:22-38:23::_ :: "x1:a\n-> x2:[a]\n-> {v : [a] | null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
38:24-38:29::Main.range :: "forall a.\n(GHC.Classes.Ord [Bivariant]\n[] a, GHC.Num.Num [Bivariant]\n[] a) =>\na -> a -> [a]"
38:31-38:33::lo :: "{VV : a | VV == lo}"
38:34-38:35::_ :: "x1:a -> x2:a -> {VV : a | VV == x1 + x2}"
38:36-38:37::lq_anf__d1tc :: "a"
38:39-38:41::hi :: "{VV : a | VV == hi}"
42:3-42:10::Main.listAdd :: "[GHC.Types.Int] -> GHC.Types.Int"
42:20-42:21::GHC.Types.I# :: "x1:GHC.Prim.Int# -> {v : GHC.Types.Int | v == (x1  :  int)}"
43:20-43:21::x :: "{v : GHC.Types.Int | v == x}"
43:22-43:23::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 + x2}"
43:24-43:31::Main.listAdd :: "[GHC.Types.Int] -> GHC.Types.Int"
43:32-43:34::xs :: "{v : [GHC.Types.Int] | v == xs && len v >= 0}"
56:25-56:29::Main.$fShowShape :: "(GHC.Show.Show Main.Shape)"
58:3-58:7::Main.area :: "Main.Shape -> GHC.Types.Double"
58:28-58:30::lq_anf__d1t7 :: "GHC.Types.Double"
58:31-58:32::_ :: "x1:GHC.Types.Double\n-> x2:GHC.Types.Double\n-> {v : GHC.Types.Double | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}"
58:33-58:34::r :: "{v : GHC.Types.Double | v == r}"
58:35-58:36::_ :: "x1:GHC.Types.Double\n-> x2:GHC.Types.Double\n-> {v : GHC.Types.Double | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}"
58:37-58:38::r :: "{v : GHC.Types.Double | v == r}"
59:28-59:29::d :: "{v : GHC.Types.Double | v == d}"
59:30-59:31::_ :: "x1:GHC.Types.Double\n-> x2:GHC.Types.Double\n-> {v : GHC.Types.Double | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}"
59:32-59:33::d :: "{v : GHC.Types.Double | v == d}"
60:28-60:36::_ :: "[(GHC.Types.Double, GHC.Types.Double)] -> GHC.Types.Double"
60:37-60:39::ps :: "{v : [(GHC.Types.Double, GHC.Types.Double)] | v == ps && len v >= 0}"
62:3-62:11::Main.areaPoly :: "forall a b. (GHC.Num.Num [Bivariant]\n[] b) => [a] -> b"
62:30-62:42::_ :: "a -> a -> a -> {VV : b | false}"
62:43-62:45::p1 :: "{VV : a | VV == p1}"
62:46-62:48::p2 :: "{VV : a | VV == p2}"
62:49-62:51::p3 :: "{VV : a | VV == p3}"
62:52-62:53::_ :: "x1:a -> x2:a -> {VV : a | VV == x1 + x2}"
62:54-62:62::Main.areaPoly :: "forall a b. (GHC.Num.Num [Bivariant]\n[] b) => [a] -> b"
62:64-62:66::p1 :: "{VV : a | VV == p1}"
62:66-62:67::_ :: "x1:a\n-> x2:[a]\n-> {v : [a] | null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
62:67-62:69::p3 :: "{VV : a | VV == p3}"
62:69-62:70::_ :: "x1:a\n-> x2:[a]\n-> {v : [a] | null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
62:70-62:74::rest :: "{v : [a] | v == rest && len v >= 0}"
63:30-63:31::lq_anf__d1t1 :: "{v : GHC.Integer.Type.Integer | v == 0}"
66:3-66:15::Main.areaTriangle :: "forall a. a"
66:18-66:27::GHC.Err.undefined :: "forall a. a"
68:3-68:5::Main.c0 :: "Main.Shape"
68:8-68:14::_ :: "GHC.Types.Double\n-> GHC.Types.Double -> GHC.Types.Double -> Main.Shape"
68:15-68:16::lq_anf__d1sT :: "{v : GHC.Types.Double | v == 0.0}"
68:17-68:18::lq_anf__d1sU :: "{v : GHC.Types.Double | v == 0.0}"
68:19-68:22::lq_anf__d1sV :: "{v : GHC.Types.Double | v == 2.3}"
69:3-69:5::Main.c1 :: "Main.Shape"
69:8-69:14::_ :: "GHC.Types.Double\n-> GHC.Types.Double -> GHC.Types.Double -> Main.Shape"
69:15-69:16::lq_anf__d1sQ :: "{v : GHC.Types.Double | v == 0.0}"
69:17-69:18::lq_anf__d1sR :: "{v : GHC.Types.Double | v == 1.0}"
69:19-69:23::lq_anf__d1sS :: "{v : GHC.Types.Double | v == 1.31}"
70:3-70:5::Main.s0 :: "Main.Shape"
70:8-70:14::_ :: "GHC.Types.Double\n-> GHC.Types.Double -> GHC.Types.Double -> Main.Shape"
70:15-70:17::lq_anf__d1sN :: "{v : GHC.Types.Double | v == 12.0}"
70:18-70:19::lq_anf__d1sO :: "{v : GHC.Types.Double | v == 1.0}"
70:20-70:25::lq_anf__d1sP :: "{v : GHC.Types.Double | v == 12312.0}"
71:3-71:5::Main.p0 :: "Main.Shape"
71:8-71:12::_ :: "[(GHC.Types.Double, GHC.Types.Double)] -> Main.Shape"
71:15-71:39::lq_anf__d1sM :: "{v : [(GHC.Types.Double, GHC.Types.Double)] | null v <=> false && len v >= 0}"
71:16-71:21::lq_anf__d1sC :: "(GHC.Types.Double, GHC.Types.Double)"
71:17-71:18::lq_anf__d1sA :: "{v : GHC.Types.Double | v == 0.0}"
71:19-71:20::lq_anf__d1sB :: "{v : GHC.Types.Double | v == 0.0}"
71:23-71:28::lq_anf__d1sF :: "(GHC.Types.Double, GHC.Types.Double)"
71:24-71:25::lq_anf__d1sD :: "{v : GHC.Types.Double | v == 4.0}"
71:26-71:27::lq_anf__d1sE :: "{v : GHC.Types.Double | v == 4.0}"
71:30-71:38::lq_anf__d1sI :: "(GHC.Types.Double, GHC.Types.Double)"
71:31-71:33::lq_anf__d1sG :: "{v : GHC.Types.Double | v == 92.0}"
71:35-71:37::lq_anf__d1sH :: "{v : GHC.Types.Double | v == 92.0}"
75:3-75:7::Main.act1 :: "(GHC.Types.IO ())"
75:10-75:18::_ :: "[GHC.Types.Char] -> (GHC.Types.IO ())"
75:19-75:47::lq_anf__d1sz :: "{v : [GHC.Types.Char] | len v >= 0}"
76:3-76:7::Main.act2 :: "(GHC.Types.IO ())"
76:10-76:18::_ :: "[GHC.Types.Char] -> (GHC.Types.IO ())"
76:19-76:53::lq_anf__d1sy :: "{v : [GHC.Types.Char] | len v >= 0}"
77:3-77:7::Main.act3 :: "(GHC.Types.IO ())"
77:10-77:18::_ :: "[GHC.Types.Char] -> (GHC.Types.IO ())"
77:19-77:58::lq_anf__d1sx :: "{v : [GHC.Types.Char] | len v >= 0}"