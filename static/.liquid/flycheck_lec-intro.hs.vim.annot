10:1-10:3::e1 :: "Double"
10:6-10:8::lq_anf__d1oC :: "{v : Double | v == 31.0}"
10:9-10:10::_ :: "x1:Double\n-> x2:Double\n-> {v : Double | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}"
10:12-10:14::lq_anf__d1oD :: "{v : Double | v == 42.0}"
10:15-10:16::_ :: "x1:Double -> x2:Double -> {v : Double | v == x1 + x2}"
10:17-10:19::lq_anf__d1oE :: "{v : Double | v == 56.0}"
12:1-12:3::e2 :: "Double"
12:6-12:7::lq_anf__d1ov :: "{v : Double | v == 3.0}"
12:8-12:9::_ :: "x1:Double\n-> x2:Double\n-> {v : Double | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}"
12:11-12:14::lq_anf__d1ow :: "{v : Double | v == 4.2}"
12:15-12:16::_ :: "x1:Double -> x2:Double -> {v : Double | v == x1 + x2}"
12:17-12:20::lq_anf__d1ox :: "{v : Double | v == 5.6}"
15:1-15:3::e3 :: "Bool"
15:6-15:10::True :: "{v : Bool | Prop v && v == GHC.Types.True}"
18:1-18:3::e4 :: "((Integer, Double), Bool)"
18:6-18:22::(,) :: "forall a b <p2 :: a b -> Prop>.\nx1:a\n-> x2:{VV : b<p2 x1> | true}\n-> {v : (a, b)<\\x6 VV -> p2 x6> | fst v == x1 && x_Tuple22 v == x2 && snd v == x2 && x_Tuple21 v == x1}"
18:7-18:15::lq_anf__d1pd :: "(Integer, Double)"
18:11-18:14::lq_anf__d1pc :: "{v : Double | v == 5.2}"
18:17-18:21::True :: "{v : Bool | Prop v && v == GHC.Types.True}"
23:1-23:5::zero :: "Integer"
25:1-25:2::x :: "Integer"
28:1-28:4::pos :: "Integer -> Bool"
28:5-28:6::x :: "Integer"
28:9-28:10::x :: "{v : Integer | v == x}"
28:11-28:12::_ :: "x1:Integer -> x2:Integer -> {v : Bool | Prop v <=> x1 > v}"
33:1-33:5::pat3 :: "Int -> Int -> Int -> Int"
33:6-33:7::x :: "Int"
33:8-33:9::y :: "Int"
33:10-33:11::z :: "Int"
33:14-33:15::x :: "{v : Int | v == x}"
33:16-33:17::_ :: "x1:Int\n-> x2:Int\n-> {v : Int | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}"
33:19-33:20::y :: "{v : Int | v == y}"
33:21-33:22::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 + x2}"
33:23-33:24::z :: "{v : Int | v == z}"
35:1-35:4::zog :: "Int -> Int"
35:7-35:11::_ :: "Int -> Int -> Int -> Int"
35:12-35:13::lq_anf__d1zD :: "{v : Int | v == (2  :  int)}"
35:14-35:16::lq_anf__d1zE :: "{v : Int | v == (10  :  int)}"
39:1-39:4::pat :: "(Int, Int, Int) -> Int"
39:17-39:18::x :: "{v : Int | v == x}"
39:19-39:20::_ :: "x1:Int\n-> x2:Int\n-> {v : Int | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}"
39:22-39:23::y :: "{v : Int | v == y}"
39:24-39:25::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 + x2}"
39:26-39:27::z :: "{v : Int | v == z}"
50:1-50:4::mys :: "forall a b c. (a, b, c) -> c"
50:17-50:18::z :: "{VV : a | VV == z}"
56:1-56:3::e5 :: "[Char]"
56:6-56:21::lq_anf__d1q8 :: "{v : [Char] | null v <=> false && len v >= 0}"
56:7-56:10::lq_anf__d1q3 :: "Char"
56:12-56:15::lq_anf__d1q4 :: "Char"
56:17-56:20::lq_anf__d1q5 :: "Char"
59:1-59:3::e6 :: "[[Double]]"
59:6-59:26::lq_anf__d1qt :: "{v : [[Double]] | null v <=> false && len v >= 0}"
59:7-59:10::lq_anf__d1qi :: "{v : [Double] | null v <=> false && len v >= 0}"
59:8-59:9::lq_anf__d1qg :: "{v : Double | v == 1.0}"
59:12-59:18::lq_anf__d1qn :: "{v : [Double] | null v <=> false && len v >= 0}"
59:13-59:14::lq_anf__d1qj :: "{v : Double | v == 2.0}"
59:16-59:17::lq_anf__d1qk :: "{v : Double | v == 3.0}"
59:20-59:25::lq_anf__d1qq :: "{v : [Double] | null v <=> false && len v >= 0}"
59:21-59:24::lq_anf__d1qo :: "{v : Double | v == 4.2}"
61:1-61:4::emp :: "forall a. [a]"
61:7-61:9::[] :: "forall a <p :: a a -> Prop>.\n{v : [a]<\\x4 VV -> p x4> | null v <=> true && len v == 0}"
64:1-64:3::e7 :: "[Integer]"
64:6-64:13::lq_anf__d1r5 :: "{v : Integer | v == 1}"
64:8-64:9::_ :: "x1:Integer\n-> x2:[Integer]\n-> {v : [Integer] | null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
64:10-64:13::lq_anf__d1r6 :: "{v : [Integer] | len v >= 0}"
67:1-67:3::e8 :: "[[Char]]"
67:6-67:11::lq_anf__d1r9 :: "{v : [Char] | len v >= 0}"
67:12-67:13::_ :: "x1:[Char]\n-> x2:[[Char]]\n-> {v : [[Char]] | null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
67:14-67:17::lq_anf__d1ra :: "{v : [[Char]] | len v >= 0}"
70:1-70:3::e9 :: "[Double]"
70:6-70:9::lq_anf__d1rw :: "{v : Double | v == 4.9}"
70:10-70:11::_ :: "x1:Double\n-> x2:[Double]\n-> {v : [Double] | null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
70:12-70:15::lq_anf__d1rx :: "{v : [Double] | len v >= 0}"
74:1-74:6::cons2 :: "forall a. a -> a -> [a] -> [a]"
74:7-74:9::x1 :: "a"
74:10-74:12::x2 :: "a"
74:13-74:15::xs :: "[a]"
74:18-74:20::x1 :: "{VV : a | VV == x1}"
74:21-74:22::_ :: "x1:a\n-> x2:[a]\n-> {v : [a] | null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
74:23-74:25::x2 :: "{VV : a | VV == x2}"
74:26-74:27::_ :: "x1:a\n-> x2:[a]\n-> {v : [a] | null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
74:28-74:30::xs :: "{v : [a] | v == xs && len v >= 0}"
82:1-82:10::firstElem :: "forall a. [a] -> a"
82:19-82:20::x :: "{VV : a | VV == x}"
109:1-109:6::clone :: "forall a. Int -> a -> [a]"
109:7-109:8::n :: "Int"
109:9-109:10::x :: "a"
109:17-109:20::_ :: "Bool -> [a] -> [a] -> [a]"
109:22-109:23::n :: "{v : Int | v == n}"
109:24-109:25::_ :: "x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 > v}"
109:26-109:27::lq_anf__d1um :: "{v : Int | v == (0  :  int)}"
109:30-109:31::x :: "{VV : a | VV == x}"
109:32-109:33::_ :: "x1:a\n-> x2:[a]\n-> {v : [a] | null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
109:34-109:39::clone :: "forall a. Int -> a -> [a]"
109:41-109:42::n :: "{v : Int | v == n}"
109:42-109:43::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 - x2}"
109:43-109:44::lq_anf__d1uo :: "{v : Int | v == (1  :  int)}"
109:46-109:47::x :: "{VV : a | VV == x}"
109:49-109:51::lq_anf__d1us :: "{v : [a] | null v <=> true && len v == 0 && len v >= 0}"
115:1-115:5::bob1 :: "[Char]"
115:11-115:16::_ :: "Bool"
115:13-115:14::_ :: "x1:Integer -> x2:Integer -> {v : Bool | Prop v <=> x1 > v}"
115:35-115:40::unpackCString# :: "Addr# -> [Char]"
115:49-115:56::unpackCString# :: "Addr# -> [Char]"
116:1-116:5::bob2 :: "[Char]"
116:11-116:18::lq_anf__d1uF :: "{v : [Integer] | null v <=> false && len v >= 0}"
116:19-116:21::_ :: "x1:[Integer] -> x2:[Integer] -> {v : Bool | Prop v <=> x1 == v}"
116:22-116:32::lq_anf__d1uO :: "{v : [Integer] | null v <=> false && len v >= 0}"
116:23-116:24::_ :: "x1:Integer\n-> x2:[Integer]\n-> {v : [Integer] | null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
116:24-116:32::lq_anf__d1uN :: "{v : [Integer] | null v <=> false && len v >= 0}"
116:25-116:26::_ :: "x1:Integer\n-> x2:[Integer]\n-> {v : [Integer] | null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
116:26-116:32::lq_anf__d1uM :: "{v : [Integer] | null v <=> false && len v >= 0}"
116:27-116:28::_ :: "x1:Integer\n-> x2:[Integer]\n-> {v : [Integer] | null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
116:28-116:32::lq_anf__d1uL :: "{v : [Integer] | null v <=> false && len v >= 0}"
116:29-116:30::_ :: "x1:Integer\n-> x2:[Integer]\n-> {v : [Integer] | null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
116:30-116:32::lq_anf__d1uK :: "{v : [Integer] | null v <=> true && len v == 0 && len v >= 0}"
116:38-116:46::unpackCString# :: "Addr# -> [Char]"
116:52-116:59::unpackCString# :: "Addr# -> [Char]"
118:1-118:4::ite :: "forall a. Bool -> a -> a -> a"
118:11-118:13::e1 :: "a"
118:18-118:20::e1 :: "{VV : a | VV == e1}"
119:18-119:20::ds_d1sP :: "a"
142:18-142:19::ds_d1qT :: "Int"
142:20-142:22::_ :: "x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 == v}"
142:23-142:24::lq_anf__d1sB :: "{v : Int | v == (0  :  int)}"
143:22-143:24::[] :: "forall a <p :: a a -> Prop>.\n{v : [a]<\\x4 VV -> p x4> | null v <=> true && len v == 0}"
144:22-144:23::x :: "{VV : a | VV == x}"
144:24-144:25::_ :: "x1:a\n-> x2:[a]\n-> {v : [a] | null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
144:27-144:32::clone :: "forall a. Int -> a -> [a]"
144:34-144:35::ds_d1qT :: "Int"
144:35-144:36::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 - x2}"
144:36-144:37::lq_anf__d1sE :: "{v : Int | v == (1  :  int)}"
144:39-144:40::x :: "{VV : a | VV == x}"
150:1-150:7::clone' :: "forall a b.\n(Ord [Bivariant]\n[] a, Num [Bivariant]\n[] a) =>\na -> b -> [b]"
150:8-150:9::n :: "a"
150:10-150:11::x :: "a"
151:5-151:6::n :: "{VV : a | VV == n}"
151:7-151:8::_ :: "x1:a -> x2:a -> {v : Bool | Prop v <=> x1 > v}"
151:9-151:10::lq_anf__d1xM :: "a"
151:17-151:18::x :: "{VV : a | VV == x}"
151:19-151:20::_ :: "x1:a\n-> x2:[a]\n-> {v : [a] | null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
151:21-151:27::clone' :: "forall a b.\n(Ord [Bivariant]\n[] a, Num [Bivariant]\n[] a) =>\na -> b -> [b]"
151:29-151:30::n :: "{VV : a | VV == n}"
151:30-151:31::_ :: "x1:a -> x2:a -> {VV : a | VV == x1 - x2}"
151:31-151:32::lq_anf__d1xQ :: "a"
151:34-151:35::x :: "{VV : a | VV == x}"
152:17-152:19::_ :: "{v : [a] | null v <=> true && len v == 0}"
156:1-156:8::clone'' :: "forall a b.\n(Num [Bivariant]\n[] a, Eq [Contravariant]\n[] a) =>\nb -> a -> [b]"
156:9-156:10::x :: "a"
156:15-156:17::[] :: "forall a <p :: a a -> Prop>.\n{v : [a]<\\x4 VV -> p x4> | null v <=> true && len v == 0}"
157:15-157:16::x :: "{VV : a | VV == x}"
157:17-157:18::_ :: "x1:a\n-> x2:[a]\n-> {v : [a] | null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
157:19-157:26::clone'' :: "forall a b.\n(Num [Bivariant]\n[] a, Eq [Contravariant]\n[] a) =>\nb -> a -> [b]"
157:27-157:28::x :: "{VV : a | VV == x}"
157:30-157:31::ds_d1x1 :: "a"
157:31-157:32::_ :: "x1:a -> x2:a -> {VV : a | VV == x1 - x2}"
157:32-157:33::lq_anf__d1xI :: "a"
169:1-169:11::ifThenElse :: "forall a. Bool -> a -> a -> a"
169:17-169:25::thenExpr :: "a"
169:26-169:34::elseExpr :: "a"
169:38-169:46::thenExpr :: "{VV : a | VV == thenExpr}"
170:38-170:46::elseExpr :: "{VV : a | VV == elseExpr}"
174:1-174:9::clone''' :: "forall a b.\n(Num [Bivariant]\n[] a, Eq [Contravariant]\n[] a) =>\nb -> a -> [b]"
174:10-174:11::x :: "a"
174:12-174:13::n :: "a"
174:16-174:26::_ :: "Bool -> [a] -> [a] -> [a]"
174:28-174:29::n :: "{VV : a | VV == n}"
174:30-174:32::_ :: "x1:a -> x2:a -> {v : Bool | Prop v <=> x1 == v}"
174:33-174:34::lq_anf__d1zi :: "a"
174:36-174:38::lq_anf__d1zk :: "{v : [a] | null v <=> true && len v == 0 && len v >= 0}"
174:40-174:41::x :: "{VV : a | VV == x}"
174:42-174:43::_ :: "x1:a\n-> x2:[a]\n-> {v : [a] | null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
174:44-174:52::clone''' :: "forall a b.\n(Num [Bivariant]\n[] a, Eq [Contravariant]\n[] a) =>\nb -> a -> [b]"
174:53-174:54::x :: "{VV : a | VV == x}"
174:56-174:57::n :: "{VV : a | VV == n}"
174:57-174:58::_ :: "x1:a -> x2:a -> {VV : a | VV == x1 - x2}"
174:58-174:59::lq_anf__d1zm :: "a"
188:1-188:6::range :: "forall a.\n(Ord [Bivariant]\n[] a, Num [Bivariant]\n[] a) =>\na -> a -> [a]"
188:7-188:9::lo :: "a"
188:10-188:12::hi :: "a"
189:5-189:7::lo :: "{VV : a | VV == lo}"
189:8-189:10::_ :: "x1:a -> x2:a -> {v : Bool | Prop v <=> x1 <= v}"
189:11-189:13::hi :: "{VV : a | VV == hi}"
189:17-189:19::lo :: "{VV : a | VV == lo}"
189:20-189:21::_ :: "x1:a\n-> x2:[a]\n-> {v : [a] | null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
189:22-189:26::rest :: "{v : [a] | v == rest && len v >= 0}"
190:17-190:19::_ :: "{v : [a] | null v <=> true && len v == 0}"
192:5-192:9::rest :: "[a]"
192:17-192:22::range :: "forall a.\n(Ord [Bivariant]\n[] a, Num [Bivariant]\n[] a) =>\na -> a -> [a]"
192:24-192:26::lo :: "{VV : a | VV == lo}"
192:26-192:27::_ :: "x1:a -> x2:a -> {VV : a | VV == x1 + x2}"
192:27-192:28::lq_anf__d1tH :: "a"
192:30-192:32::hi :: "{VV : a | VV == hi}"
249:1-249:4::sum :: "forall a. (Num [Bivariant]\n[] a) => [a] -> a"
249:14-249:15::lq_anf__d1wO :: "{v : Integer | v == 0}"
250:14-250:15::x :: "{VV : a | VV == x}"
250:16-250:17::_ :: "x1:a -> x2:a -> {VV : a | VV == x1 + x2}"
250:18-250:21::sum :: "forall a. (Num [Bivariant]\n[] a) => [a] -> a"
250:22-250:24::xs :: "{v : [a] | v == xs && len v >= 0}"
270:1-270:5::area :: "Shape -> Double"
270:21-270:25::side :: "{v : Double | v == side}"
270:26-270:27::_ :: "x1:Double\n-> x2:Double\n-> {v : Double | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}"
270:28-270:32::side :: "{v : Double | v == side}"
271:23-271:25::lq_anf__d1wX :: "Double"
271:26-271:27::_ :: "x1:Double\n-> x2:Double\n-> {v : Double | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}"
271:28-271:34::radius :: "{v : Double | v == radius}"
271:35-271:36::_ :: "x1:Double\n-> x2:Double\n-> {v : Double | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}"
271:37-271:43::radius :: "{v : Double | v == radius}"
275:1-275:12::docrazymath :: "forall a b c. b -> c -> a"
275:13-275:14::x :: "a"
275:15-275:16::y :: "a"
275:20-275:21::x :: "{VV : a | VV == x}"
275:22-275:33::_ :: "a -> b -> c"
275:34-275:35::y :: "{VV : a | VV == y}"
278:1-278:13::getUserInput :: "forall a b c. a -> b -> c"
278:14-278:15::x :: "a"
278:16-278:17::y :: "a"
278:20-278:29::undefined :: "forall a. a"
347:1-347:1::main :: "{v : (IO ()) | v == Main.main}"
347:8-347:16::_ :: "[Char] -> (IO ())"
347:17-347:31::lq_anf__d1w3 :: "{v : [Char] | len v >= 0}"
359:1-359:5::act1 :: "(IO ())"
359:8-359:16::_ :: "[Char] -> (IO ())"
359:17-359:45::lq_anf__d1y6 :: "{v : [Char] | len v >= 0}"
360:1-360:5::act2 :: "(IO ())"
360:8-360:16::_ :: "[Char] -> (IO ())"
360:17-360:51::lq_anf__d1y5 :: "{v : [Char] | len v >= 0}"
361:1-361:5::act3 :: "(IO ())"
361:8-361:16::_ :: "[Char] -> (IO ())"
361:17-361:56::lq_anf__d1y4 :: "{v : [Char] | len v >= 0}"
365:1-365:5::acts :: "[(IO ())]"
365:8-365:26::lq_anf__d1y9 :: "{v : [(IO ())] | null v <=> false && xListSelector v == Main.act2 && len v >= 0}"
365:9-365:13::act1 :: "{v : (IO ()) | v == Main.act1}"
365:15-365:19::act2 :: "{v : (IO ()) | v == Main.act2}"
365:21-365:25::act3 :: "{v : (IO ()) | v == Main.act3}"
369:1-369:7::bigAct :: "(IO ())"
369:13-369:17::act1 :: "{v : (IO ()) | v == Main.act1}"
370:13-370:17::act2 :: "{v : (IO ()) | v == Main.act2}"
371:13-371:17::act3 :: "{v : (IO ()) | v == Main.act3}"
375:1-375:4::act :: "(IO ())"
375:10-375:18::_ :: "[Char] -> (IO ())"
375:19-375:26::lq_anf__d1zI :: "{v : [Char] | len v >= 0}"
376:10-376:14::name :: "[Char]"
376:18-376:25::getLine :: "{v : (IO [Char]) | v == System.IO.getLine}"
377:10-377:18::_ :: "[Char] -> (IO ())"
377:20-377:28::lq_anf__d1zK :: "{v : [Char] | len v >= 0}"
377:29-377:31::_ :: "x1:[Char] -> x2:[Char] -> {v : [Char] | len v == len x1 + len v}"
377:32-377:36::name :: "{v : [Char] | v == name && len v >= 0}"